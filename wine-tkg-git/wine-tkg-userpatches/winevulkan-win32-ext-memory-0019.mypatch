diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 507537df632..d91818362cc 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -102,7 +102,6 @@ UNSUPPORTED_EXTENSIONS = [
     "VK_KHR_shared_presentable_image", # Needs WSI work.
     "VK_KHR_video_encode_queue",
     "VK_KHR_video_queue", # TODO Video extensions use separate headers + xml
-    "VK_KHR_win32_keyed_mutex",
     "VK_NV_external_memory_rdma", # Needs shared resources work.
 
     # Extensions for other platforms
@@ -347,8 +346,8 @@ STRUCT_CHAIN_CONVERSIONS = {
     "VkPhysicalDeviceImageFormatInfo2": [],
     "VkPhysicalDeviceExternalSemaphoreInfo": [],
     "VkSemaphoreCreateInfo": ["VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"],
-    "VkSubmitInfo": ["VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"],
-    "VkSubmitInfo2": [],
+    "VkSubmitInfo": ["VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR", "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"],
+    "VkSubmitInfo2": ["VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"],
     "VkBindSparseInfo" : [],
 }
 
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 3a1105cfd4d..4f60400ae24 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -279,7 +279,7 @@ static struct wine_phys_dev *wine_vk_physical_device_alloc(struct wine_instance
     uint32_t num_host_properties, num_properties = 0;
     VkExtensionProperties *host_properties = NULL;
     VkPhysicalDeviceProperties physdev_properties;
-    BOOL have_external_memory_host = FALSE;
+    BOOL have_external_memory_host = FALSE, have_external_memory_fd = FALSE, have_external_semaphore_fd = FALSE;
     VkResult res;
     unsigned int i, j;
 
@@ -333,6 +333,7 @@ static struct wine_phys_dev *wine_vk_physical_device_alloc(struct wine_instance
             snprintf(host_properties[i].extensionName, sizeof(host_properties[i].extensionName),
                     VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME);
             host_properties[i].specVersion = VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION;
+            have_external_memory_fd = TRUE;
         }
         if (!strcmp(host_properties[i].extensionName, "VK_KHR_external_semaphore_fd"))
         {
@@ -341,6 +342,7 @@ static struct wine_phys_dev *wine_vk_physical_device_alloc(struct wine_instance
             snprintf(host_properties[i].extensionName, sizeof(host_properties[i].extensionName),
                     VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME);
             host_properties[i].specVersion = VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION;
+            have_external_semaphore_fd = TRUE;
         }
 
         if (wine_vk_device_extension_supported(host_properties[i].extensionName))
@@ -356,7 +358,8 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhysicalDevice host_handle,
             have_map_memory2 = TRUE;
     }
 
-    TRACE("Host supported extensions %u, Wine supported extensions %u\n", num_host_properties, num_properties);
+    if (have_external_memory_fd && have_external_semaphore_fd)
+        ++num_properties; /* VK_KHR_win32_keyed_mutex */
 
     if (!(object->extensions = calloc(num_properties, sizeof(*object->extensions))))
     {
@@ -372,7 +375,15 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhysicalDevice host_handle,
             j++;
         }
     }
+    if (have_external_memory_fd && have_external_semaphore_fd)
+    {
+        strcpy(object->extensions[j].extensionName, VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME);
+        object->extensions[j].specVersion = VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION;
+        TRACE("Enabling extension '%s' for physical device %p\n", object->extensions[j].extensionName, object);
+        j++;
+    }
     object->extension_count = num_properties;
+    TRACE("Host supported extensions %u, Wine supported extensions %u\n", num_host_properties, num_properties);
 
     if (zero_bits && have_memory_placed && have_map_memory2)
     {
@@ -524,7 +535,7 @@ static VkResult wine_vk_device_convert_create_info(struct wine_phys_dev *phys_de
     const char *extra_extensions[2], * const*extensions = src->ppEnabledExtensionNames;
     unsigned int i, extra_count = 0, extensions_count = src->enabledExtensionCount;
     char **extra_xr_extensions;
-    unsigned int count, o = 0, append_xr = 0, replace_win32 = 0, append_timeline = 1;
+    unsigned int count, o = 0, append_xr = 0, have_ext_mem32 = 0, have_ext_sem32 = 0, have_keyed_mutex = 0, append_timeline = 1;
     VkBaseOutStructure *header;
 
     *dst = *src;
@@ -544,8 +555,12 @@ static VkResult wine_vk_device_convert_create_info(struct wine_phys_dev *phys_de
 
         if (!strcmp(extension_name, wine_xr_extension_name))
             append_xr = 1;
-        else if (!strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_memory_win32") || !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_semaphore_win32"))
-            replace_win32 = 1;
+        else if (!strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_memory_win32"))
+            have_ext_mem32 = 1;
+        else if (!strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_semaphore_win32"))
+            have_ext_sem32 = 1;
+        else if (!strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_win32_keyed_mutex"))
+            have_keyed_mutex = 1;
         else if (!strcmp(extension_name, "VK_KHR_timeline_semaphore"))
             append_timeline = 0;
     }
@@ -567,7 +582,7 @@ static VkResult wine_vk_device_convert_create_info(struct wine_phys_dev *phys_de
     if (append_xr)
         extra_xr_extensions = parse_xr_extensions(&append_xr);
 
-    if (extra_count || append_xr || replace_win32 || append_timeline)
+    if (extra_count || append_xr || have_ext_mem32 || have_ext_sem32 || have_keyed_mutex || append_timeline)
     {
         const char **new_extensions;
 
@@ -579,20 +594,34 @@ static VkResult wine_vk_device_convert_create_info(struct wine_phys_dev *phys_de
             count += append_xr - 1;
         if (append_timeline)
             count++;
+        if (have_keyed_mutex)
+        {
+            count += (have_ext_mem32 ? 0 : 1) + (have_ext_sem32 ? 0 : 1);
+            count--;
+        }
 
         new_extensions = conversion_context_alloc(ctx, count *
                                                   sizeof(*dst->ppEnabledExtensionNames));
         for (i = 0; i < dst->enabledExtensionCount; i++)
         {
             if (append_xr && !strcmp(src->ppEnabledExtensionNames[i], wine_xr_extension_name))
                 continue;
-            if (replace_win32 && !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_memory_win32"))
+            if (have_ext_mem32 && !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_memory_win32"))
                 new_extensions[o++] = "VK_KHR_external_memory_fd";
-            else if (replace_win32 && !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_semaphore_win32"))
+            else if (have_ext_sem32 && !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_external_semaphore_win32"))
                 new_extensions[o++] = "VK_KHR_external_semaphore_fd";
+            else if (have_keyed_mutex && !strcmp(src->ppEnabledExtensionNames[i], "VK_KHR_win32_keyed_mutex"))
+                continue;
             else
                 new_extensions[o++] = src->ppEnabledExtensionNames[i];
         }
+        if (have_keyed_mutex)
+        {
+            if (!have_ext_mem32)
+                new_extensions[o++] = "VK_KHR_external_memory_fd";
+            if (!have_ext_sem32)
+                new_extensions[o++] = "VK_KHR_external_semaphore_fd";
+        }
         for (i = 0; i < extra_count; i++)
         {
             new_extensions[o++] = extra_extensions[i];

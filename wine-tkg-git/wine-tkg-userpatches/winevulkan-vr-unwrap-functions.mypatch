diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 2691624db66..cea8c693cca 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -2458,3 +2458,47 @@ NTSTATUS vk_is_available_device_function32(void *arg)
     } *params = arg;
     return is_available_device_function(UlongToPtr(params->device), UlongToPtr(params->name));
 }
+
+DECLSPEC_EXPORT VkDevice __wine_get_native_VkDevice(VkDevice handle)
+{
+    struct vulkan_device *device = vulkan_device_from_handle(handle);
+
+    return device->host.device;
+}
+
+DECLSPEC_EXPORT VkInstance __wine_get_native_VkInstance(VkInstance handle)
+{
+    struct vulkan_instance *instance = vulkan_instance_from_handle(handle);
+
+    return instance->host.instance;
+}
+
+DECLSPEC_EXPORT VkPhysicalDevice __wine_get_native_VkPhysicalDevice(VkPhysicalDevice handle)
+{
+    struct vulkan_physical_device *physical_device;
+
+    if (!handle) return NULL;
+    physical_device = vulkan_physical_device_from_handle(handle);
+    return physical_device->host.physical_device;
+}
+
+DECLSPEC_EXPORT VkQueue __wine_get_native_VkQueue(VkQueue handle)
+{
+    struct vulkan_queue *queue = vulkan_queue_from_handle(handle);
+
+    return queue->host.queue;
+}
+
+DECLSPEC_EXPORT VkPhysicalDevice __wine_get_wrapped_VkPhysicalDevice(VkInstance handle, VkPhysicalDevice native_phys_dev)
+{
+    struct vulkan_instance *instance = vulkan_instance_from_handle(handle);
+    unsigned int i;
+
+    for (i = 0; i < instance->physical_device_count; ++i)
+    {
+        if (instance->physical_devices[i].host.physical_device == native_phys_dev)
+            return instance->physical_devices[i].client.physical_device;
+    }
+    ERR("Unknown native physical device: %p (handle %p, instance %p)\n", native_phys_dev, handle, instance);
+    return NULL;
+}

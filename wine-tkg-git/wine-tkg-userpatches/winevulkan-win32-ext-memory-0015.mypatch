diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index f9cc4ebd0c0..ed8f0bfe537 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -237,6 +237,7 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhysicalDevice host_handle,
     BOOL have_memory_placed = FALSE, have_map_memory2 = FALSE;
     uint32_t num_host_properties, num_properties = 0;
     VkExtensionProperties *host_properties = NULL;
+    VkPhysicalDeviceProperties physdev_properties;
     BOOL have_external_memory_host = FALSE;
     VkResult res;
     unsigned int i, j;
@@ -248,6 +249,9 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhysicalDevice host_handle,
     object->handle = client_handle;
     object->host_physical_device = host_handle;
 
+    instance->funcs.p_vkGetPhysicalDeviceProperties(host_handle, &physdev_properties);
+    object->api_version = physdev_properties.apiVersion;
+
     client_handle->base.unix_handle = (uintptr_t)object;
 
     instance->funcs.p_vkGetPhysicalDeviceMemoryProperties(host_handle, &object->memory_properties);
@@ -504,6 +508,8 @@ static VkResult wine_vk_device_convert_create_info(struct wine_phys_dev *phys_de
         else if (!strcmp(extension_name, "VK_KHR_timeline_semaphore"))
             append_timeline = 0;
     }
+    if (append_timeline)
+         append_timeline = phys_dev->api_version < VK_API_VERSION_1_2 || phys_dev->instance->api_version < VK_API_VERSION_1_2;
     if (append_timeline)
     {
         append_timeline = 0;
@@ -1058,6 +1064,8 @@ VkResult wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
                 app_info->engineVersion);
         TRACE("API version %#x.\n", app_info->apiVersion);
 
+        object->api_version = app_info->apiVersion;
+
         if (app_info->pEngineName && !strcmp(app_info->pEngineName, "idTech"))
             object->quirks |= WINEVULKAN_QUIRK_GET_DEVICE_PROC_ADDR;
     }
@@ -1708,6 +1716,25 @@ static void wine_vk_get_physical_device_external_semaphore_properties(struct win
             break;
         case VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT:
         {
+            unsigned int i;
+
+            if (phys_dev->api_version < VK_API_VERSION_1_2 ||
+                phys_dev->instance->api_version < VK_API_VERSION_1_2)
+            {
+                for (i = 0; i < phys_dev->extension_count; i++)
+                {
+                    if (!strcmp(phys_dev->extensions[i].extensionName, "VK_KHR_timeline_semaphore"))
+                        break;
+                }
+                if (i == phys_dev->extension_count)
+                {
+                    properties->exportFromImportedHandleTypes = 0;
+                    properties->compatibleHandleTypes = 0;
+                    properties->externalSemaphoreFeatures = 0;
+                    return;
+                }
+            }
+
             if ((p_semaphore_type_info = wine_vk_find_struct(&semaphore_info_dup, SEMAPHORE_TYPE_CREATE_INFO)))
             {
                 p_semaphore_type_info->semaphoreType = VK_SEMAPHORE_TYPE_TIMELINE;
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index f3315707200..d840e1fc33a 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -119,6 +119,7 @@ struct wine_phys_dev
     VkPhysicalDeviceMemoryProperties memory_properties;
     VkExtensionProperties *extensions;
     uint32_t extension_count;
+    uint32_t api_version;
 
     uint32_t external_memory_align;
     uint32_t map_placed_align;
@@ -139,6 +140,7 @@ struct wine_instance
 
     VkInstance handle; /* client instance */
     VkInstance host_instance;
+    uint32_t api_version;
 
     VkBool32 enable_win32_surface;
     VkBool32 enable_wrapper_list;

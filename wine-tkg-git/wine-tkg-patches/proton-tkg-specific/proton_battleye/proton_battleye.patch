From f7b8a83d06870a54430481c85c764401d96e143c Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 26 Mar 2021 10:48:14 -0400
Subject: [PATCH] ntdll: Try to load builtin DLLs from Battleye Runtime
 directory.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>

CW-Bug-Id: #16650
---
 dlls/ntdll/unix/loader.c | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index 0a05fb3f10b..711b7224bfc 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -526,11 +526,14 @@ static const char *get_pe_dir( WORD machine )

 static void set_dll_path(void)
 {
-    char *p, *path = getenv( "WINEDLLPATH" );
+    char *p, *path = getenv( "WINEDLLPATH" ), *be_runtime = getenv( "PROTON_BATTLEYE_RUNTIME" );
     int i, count = 0;

     if (path) for (p = path, count = 1; *p; p++) if (*p == ':') count++;

+    if (be_runtime)
+        count += 2;
+
     dll_paths = malloc( (count + 2) * sizeof(*dll_paths) );
     count = 0;

@@ -543,6 +546,24 @@ static void set_dll_path(void)
         free( path );
     }

+    if (be_runtime)
+    {
+        const char lib32[] = "/v1/lib/wine/";
+        const char lib64[] = "/v1/lib64/wine/";
+
+        p = malloc( strlen(be_runtime) + strlen(lib32) + 1 );
+        strcpy(p, be_runtime);
+        strcat(p, lib32);
+
+        dll_paths[count++] = p;
+
+        p = malloc( strlen(be_runtime) + strlen(lib64) + 1 );
+        strcpy(p, be_runtime);
+        strcat(p, lib64);
+
+        dll_paths[count++] = p;
+    }
+
     for (i = 0; i < count; i++) dll_path_maxlen = max( dll_path_maxlen, strlen(dll_paths[i]) );
     dll_paths[count] = NULL;
 }
From 1e89f3ebc36d9a867b71b0f8f9aab516a6be90a1 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Tue, 30 Mar 2021 21:45:05 -0400
Subject: [PATCH] kernelbase: Redirect BattlEye Launcher process creation to
 game executable.

Signed-off-by: Derek Lesho <dlesho@codeweavers.com>

CW-Bug-Id: #16650
---
 dlls/kernelbase/process.c | 200 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 200 insertions(+)

diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 08dad9cb646..b2a49a16177 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -26,6 +26,7 @@
 #include "windef.h"
 #include "winbase.h"
 #include "winnls.h"
+#include "winver.h"
 #include "wincontypes.h"
 #include "winternl.h"
 
@@ -486,6 +487,197 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalA( HANDLE token, const char *
     return ret;
 }

+static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len, WCHAR **cmd_line)
+{
+    WCHAR full_path[MAX_PATH], config_path[MAX_PATH];
+    WCHAR *p;
+    UINT size;
+    void *block;
+    DWORD *translation;
+    char buf[100];
+    char *product_name;
+    int launcher_exe_len, game_exe_len, arg_len;
+    HANDLE launcher_cfg;
+    LARGE_INTEGER launcher_cfg_size;
+    char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe, *be_arg = NULL;
+    BOOL wow64;
+    WCHAR *new_cmd_line;
+
+    if (!GetLongPathNameW( app_name, full_path, MAX_PATH )) lstrcpynW( full_path, app_name, MAX_PATH );
+    if (!GetFullPathNameW( full_path, MAX_PATH, full_path, NULL )) lstrcpynW( full_path, app_name, MAX_PATH );
+
+    /* We detect the BattlEye launcher executable through the product name property, as the executable name varies */
+    size = GetFileVersionInfoSizeExW(0, full_path, NULL);
+    if (!size)
+        return 0;
+
+    block = HeapAlloc( GetProcessHeap(), 0, size );
+
+    if (!GetFileVersionInfoExW(0, full_path, 0, size, block))
+    {
+        HeapFree( GetProcessHeap(), 0, block );
+        return 0;
+    }
+
+    if (!VerQueryValueA(block, "\\VarFileInfo\\Translation", (void **) &translation, &size) || size != 4)
+    {
+        HeapFree( GetProcessHeap(), 0, block );
+        return 0;
+    }
+
+    sprintf(buf, "\\StringFileInfo\\%08lx\\ProductName", MAKELONG(HIWORD(*translation), LOWORD(*translation)));
+
+    if (!VerQueryValueA(block, buf, (void **) &product_name, &size))
+    {
+        HeapFree( GetProcessHeap(), 0, block );
+        return 0;
+    }
+
+    if (strcmp(product_name, "BattlEye Launcher"))
+    {
+        HeapFree( GetProcessHeap(), 0, block);
+        return 0;
+    }
+
+    HeapFree( GetProcessHeap(), 0, block );
+
+    TRACE("Detected launch of a BattlEye Launcher, attempting to launch game executable instead.\n");
+
+    lstrcpynW(config_path, full_path, MAX_PATH);
+
+    for (p = config_path + wcslen(config_path); p != config_path; --p)
+        if (*p == '\\') break;
+
+    if (*p == '\\')
+    {
+        *p = 0;
+        launcher_exe_len = wcslen(p + 1);
+    }
+    else
+        launcher_exe_len = wcslen(full_path);
+
+    lstrcatW(config_path, L"\\BattlEye\\BELauncher.ini");
+
+    launcher_cfg = CreateFileW(config_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+    if (launcher_cfg == INVALID_HANDLE_VALUE)
+        return 0;
+
+    if(!GetFileSizeEx(launcher_cfg, &launcher_cfg_size) || launcher_cfg_size.u.HighPart)
+    {
+        CloseHandle(launcher_cfg);
+        return 0;
+    }
+
+    configs = HeapAlloc( GetProcessHeap(), 0, launcher_cfg_size.u.LowPart);
+
+    if (!ReadFile(launcher_cfg, configs, launcher_cfg_size.u.LowPart, &size, NULL) || size != launcher_cfg_size.u.LowPart)
+    {
+        CloseHandle(launcher_cfg);
+        HeapFree( GetProcessHeap(), 0, configs );
+        return 0;
+    }
+
+    CloseHandle(launcher_cfg);
+
+    config = configs;
+    do
+    {
+        if (!strncmp(config, "32BitExe=", 9))
+            arch_32_exe = config + 9;
+
+        if (!strncmp(config, "64BitExe=", 9))
+            arch_64_exe = config + 9;
+
+        if (!strncmp(config, "BEArg=", 6))
+            be_arg = config + 6;
+    }
+    while ((config = strchr(config, '\n')) && *(config++));
+
+    if (arch_64_exe && (sizeof(void *) == 8 || (IsWow64Process(GetCurrentProcess(), &wow64) && wow64)))
+        game_exe = arch_64_exe;
+    else if (arch_32_exe)
+        game_exe = arch_32_exe;
+    else
+    {
+        HeapFree( GetProcessHeap(), 0, configs );
+        WARN("Failed to find game executable name from BattlEye config.\n");
+        return 0;
+    }
+
+    if (strchr(game_exe, '\r'))
+        *(strchr(game_exe, '\r')) = 0;
+    if (strchr(game_exe, '\n'))
+        *(strchr(game_exe, '\n')) = 0;
+    game_exe_len = MultiByteToWideChar(CP_ACP, 0, game_exe, -1, NULL, 0) - 1;
+
+    if (be_arg)
+    {
+        if (strchr(be_arg, '\r'))
+            *(strchr(be_arg, '\r')) = 0;
+        if (strchr(be_arg, '\n'))
+            *(strchr(be_arg, '\n')) = 0;
+        arg_len = MultiByteToWideChar(CP_ACP, 0, be_arg, -1, NULL, 0) - 1;
+    }
+
+    TRACE("Launching game executable %s for BattlEye.\n", game_exe);
+
+    if ((wcslen(app_name) - launcher_exe_len) + game_exe_len + 1 > new_name_len)
+    {
+        HeapFree( GetProcessHeap(), 0, configs );
+        WARN("Game executable path doesn't fit in buffer.\n");
+        return 0;
+    }
+
+    wcscpy(new_name, app_name);
+    p = new_name + wcslen(new_name) - launcher_exe_len;
+    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, p, game_exe_len + 1);
+
+    /* find and replace executable name in command line, and add BE argument */
+    p = *cmd_line;
+    if (p[0] == '\"')
+        p++;
+
+    if (!wcsncmp(p, app_name, wcslen(app_name)))
+        p += wcslen(app_name) - launcher_exe_len;
+    else
+        p = NULL;
+
+    if (p || be_arg)
+    {
+        size = wcslen(*cmd_line) + 1;
+        if (p)
+            size += game_exe_len - launcher_exe_len;
+        if (be_arg)
+            size += 1 /* space */ + arg_len;
+        size *= sizeof(WCHAR);
+
+        /* freed by parent function */
+        new_cmd_line = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, size );
+
+        if (p)
+        {
+            lstrcpynW(new_cmd_line, *cmd_line, p - *cmd_line);
+            MultiByteToWideChar(CP_ACP, 0, game_exe, -1, new_cmd_line + wcslen(new_cmd_line), game_exe_len + 1);
+            wcscat(new_cmd_line, p + launcher_exe_len);
+        }
+        else
+        {
+            wcscpy(new_cmd_line, *cmd_line);
+        }
+
+        if (be_arg)
+        {
+            wcscat(new_cmd_line, L" ");
+            MultiByteToWideChar(CP_ACP, 0, be_arg, -1, new_cmd_line + wcslen(new_cmd_line), arg_len + 1);
+        }
+
+        *cmd_line = new_cmd_line;
+    }
+
+    HeapFree( GetProcessHeap(), 0, configs );
+    return 1;
+}
+
 /**********************************************************************
  *           CreateProcessInternalW   (kernelbase.@)
  */
@@ -550,6 +742,14 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
         app_name = name;
     }

+    p = tidy_cmdline;
+    if (battleye_launcher_redirect_hack( app_name, name, ARRAY_SIZE(name), &tidy_cmdline ))
+    {
+        app_name = name;
+        if (p != tidy_cmdline && p != cmd_line)
+            HeapFree( GetProcessHeap(), 0, p );
+    }
+
     /* Warn if unsupported features are used */

     if (flags & (IDLE_PRIORITY_CLASS | HIGH_PRIORITY_CLASS | REALTIME_PRIORITY_CLASS |
From 66e87df57525a8421caa75aad573663f90534fb9 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Thu, 30 Sep 2021 14:38:33 +0200
Subject: [PATCH] sechost: Fake presence of BEService service for ARK: Survival
 Evolved.

The game uses the presence and status of BEService to determine whether or not the game is running in BattlEye. Since with the Proton Bridge we don't have a dedicated background service, we can just pretend the service is always running.

CW-Bug-Id: #16650
---
 dlls/sechost/service.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/dlls/sechost/service.c b/dlls/sechost/service.c
index e6f4eb75db0..d005b64ed19 100644
--- a/dlls/sechost/service.c
+++ b/dlls/sechost/service.c
@@ -314,6 +314,8 @@ SC_HANDLE WINAPI DECLSPEC_HOTPATCH OpenServiceW( SC_HANDLE manager, const WCHAR
     SC_RPC_HANDLE handle = NULL;
     DWORD err;

+    char str[64];
+
     TRACE( "%p %s %#lx\n", manager, debugstr_w(name), access );

     if (!manager)
@@ -322,6 +324,14 @@ SC_HANDLE WINAPI DECLSPEC_HOTPATCH OpenServiceW( SC_HANDLE manager, const WCHAR
         return NULL;
     }

+    /* HACK for ARK: Survivial Evolved checking the status of BEService to determine whether BE is enabled. */
+    if(GetEnvironmentVariableA("SteamGameId", str, sizeof(str)) && !strcmp(str, "346110") &&
+        !wcscmp(name, L"BEService"))
+    {
+        WARN("HACK: returning fake service handle for BEService.\n");
+        return (void *)0xdeadbeef;
+    }
+
     __TRY
     {
         err = svcctl_OpenServiceW( manager, name, access, &handle );
@@ -1106,6 +1116,8 @@ BOOL WINAPI DECLSPEC_HOTPATCH QueryServiceStatusEx( SC_HANDLE service, SC_STATUS
 {
     DWORD err;

+    char str[64];
+
     TRACE( "%p %d %p %ld %p\n", service, level, buffer, size, ret_size );

     if (level != SC_STATUS_PROCESS_INFO) return set_error( ERROR_INVALID_LEVEL );
@@ -1116,6 +1128,24 @@ BOOL WINAPI DECLSPEC_HOTPATCH QueryServiceStatusEx( SC_HANDLE service, SC_STATUS
         return set_error( ERROR_INSUFFICIENT_BUFFER );
     }

+    /* HACK for ARK: Survivial Evolved checking the status of BEService to determine whether BE is enabled. */
+    if(GetEnvironmentVariableA("SteamGameId", str, sizeof(str)) && !strcmp(str, "346110") &&
+        service == (void *)0xdeadbeef)
+    {
+        SERVICE_STATUS_PROCESS *status = (SERVICE_STATUS_PROCESS *)buffer;
+        WARN("HACK: returning fake data for BEService.\n");
+        status->dwServiceType = SERVICE_WIN32_OWN_PROCESS;
+        status->dwCurrentState = SERVICE_RUNNING;
+        status->dwControlsAccepted = SERVICE_ACCEPT_SHUTDOWN | SERVICE_ACCEPT_STOP;
+        status->dwWin32ExitCode = NO_ERROR;
+        status->dwServiceSpecificExitCode = 0;
+        status->dwCheckPoint = 0;
+        status->dwWaitHint = 0;
+        status->dwProcessId = 0xdeadbee0;
+        status->dwServiceFlags = 0;
+        return TRUE;
+    }
+
     __TRY
     {
         err = svcctl_QueryServiceStatusEx( service, level, buffer, size, ret_size );
From c1d58f41052ae7ca24a83983bc9dd8ce4a395c72 Mon Sep 17 00:00:00 2001
From: Derek Lesho <dlesho@codeweavers.com>
Date: Fri, 21 Jan 2022 14:40:43 -0500
Subject: [PATCH] battleye: Add launcher process instead of redirecting
 CreateProcess call.

Fixes Arma 3 Launcher CW-Bug-Id: #18934
---
 configure.ac                    |   1 +
 dlls/kernelbase/process.c       | 134 ++++----------------------------
 programs/belauncher/Makefile.in |   7 ++
 programs/belauncher/main.c      | 116 +++++++++++++++++++++++++++
 4 files changed, 139 insertions(+), 119 deletions(-)
 create mode 100644 programs/belauncher/Makefile.in
 create mode 100644 programs/belauncher/main.c

diff --git a/configure.ac b/configure.ac
index 8e4462b1d4c..bc4f47d9889 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3410,6 +3410,7 @@ WINE_CONFIG_MAKEFILE(po)
 WINE_CONFIG_MAKEFILE(programs/arp)
 WINE_CONFIG_MAKEFILE(programs/aspnet_regiis)
 WINE_CONFIG_MAKEFILE(programs/attrib)
+WINE_CONFIG_MAKEFILE(programs/belauncher)
 WINE_CONFIG_MAKEFILE(programs/cabarc)
 WINE_CONFIG_MAKEFILE(programs/cacls)
 WINE_CONFIG_MAKEFILE(programs/certutil)
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 22f9115011e..01f4ae08721 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -489,18 +489,15 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalA( HANDLE token, const char *

 static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len, WCHAR **cmd_line)
 {
-    WCHAR full_path[MAX_PATH], config_path[MAX_PATH];
+    static const WCHAR belauncherW[] = L"c:\\windows\\system32\\belauncher.exe";
+
+    WCHAR full_path[MAX_PATH];
     WCHAR *p;
     UINT size;
     void *block;
     DWORD *translation;
     char buf[100];
     char *product_name;
-    int launcher_exe_len, game_exe_len, arg_len;
-    HANDLE launcher_cfg;
-    LARGE_INTEGER launcher_cfg_size;
-    char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe, *be_arg = NULL;
-    BOOL wow64;
     WCHAR *new_cmd_line;

     if (!GetLongPathNameW( app_name, full_path, MAX_PATH )) lstrcpynW( full_path, app_name, MAX_PATH );
@@ -541,96 +538,15 @@ static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_nam

     HeapFree( GetProcessHeap(), 0, block );

-    TRACE("Detected launch of a BattlEye Launcher, attempting to launch game executable instead.\n");
-
-    lstrcpynW(config_path, full_path, MAX_PATH);
-
-    for (p = config_path + wcslen(config_path); p != config_path; --p)
-        if (*p == '\\') break;
-
-    if (*p == '\\')
-    {
-        *p = 0;
-        launcher_exe_len = wcslen(p + 1);
-    }
-    else
-        launcher_exe_len = wcslen(full_path);
-
-    lstrcatW(config_path, L"\\BattlEye\\BELauncher.ini");
-
-    launcher_cfg = CreateFileW(config_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
-    if (launcher_cfg == INVALID_HANDLE_VALUE)
-        return 0;
-
-    if(!GetFileSizeEx(launcher_cfg, &launcher_cfg_size) || launcher_cfg_size.u.HighPart)
-    {
-        CloseHandle(launcher_cfg);
-        return 0;
-    }
-
-    configs = HeapAlloc( GetProcessHeap(), 0, launcher_cfg_size.u.LowPart);
-
-    if (!ReadFile(launcher_cfg, configs, launcher_cfg_size.u.LowPart, &size, NULL) || size != launcher_cfg_size.u.LowPart)
-    {
-        CloseHandle(launcher_cfg);
-        HeapFree( GetProcessHeap(), 0, configs );
-        return 0;
-    }
-
-    CloseHandle(launcher_cfg);
-
-    config = configs;
-    do
-    {
-        if (!strncmp(config, "32BitExe=", 9))
-            arch_32_exe = config + 9;
-
-        if (!strncmp(config, "64BitExe=", 9))
-            arch_64_exe = config + 9;
-
-        if (!strncmp(config, "BEArg=", 6))
-            be_arg = config + 6;
-    }
-    while ((config = strchr(config, '\n')) && *(config++));
-
-    if (arch_64_exe && (sizeof(void *) == 8 || (IsWow64Process(GetCurrentProcess(), &wow64) && wow64)))
-        game_exe = arch_64_exe;
-    else if (arch_32_exe)
-        game_exe = arch_32_exe;
-    else
-    {
-        HeapFree( GetProcessHeap(), 0, configs );
-        WARN("Failed to find game executable name from BattlEye config.\n");
-        return 0;
-    }
-
-    if (strchr(game_exe, '\r'))
-        *(strchr(game_exe, '\r')) = 0;
-    if (strchr(game_exe, '\n'))
-        *(strchr(game_exe, '\n')) = 0;
-    game_exe_len = MultiByteToWideChar(CP_ACP, 0, game_exe, -1, NULL, 0) - 1;
-
-    if (be_arg)
-    {
-        if (strchr(be_arg, '\r'))
-            *(strchr(be_arg, '\r')) = 0;
-        if (strchr(be_arg, '\n'))
-            *(strchr(be_arg, '\n')) = 0;
-        arg_len = MultiByteToWideChar(CP_ACP, 0, be_arg, -1, NULL, 0) - 1;
-    }
-
-    TRACE("Launching game executable %s for BattlEye.\n", game_exe);
+    TRACE("Detected launch of a BattlEye Launcher, redirecting to Proton version.\n");

-    if ((wcslen(app_name) - launcher_exe_len) + game_exe_len + 1 > new_name_len)
+    if (new_name_len < wcslen(belauncherW) + 1)
     {
-        HeapFree( GetProcessHeap(), 0, configs );
         WARN("Game executable path doesn't fit in buffer.\n");
         return 0;
     }

-    wcscpy(new_name, app_name);
-    p = new_name + wcslen(new_name) - launcher_exe_len;
-    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, p, game_exe_len + 1);
+    wcscpy(new_name, belauncherW);

     /* find and replace executable name in command line, and add BE argument */
     p = *cmd_line;
@@ -638,43 +554,23 @@ static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_nam
         p++;

     if (!wcsncmp(p, app_name, wcslen(app_name)))
-        p += wcslen(app_name) - launcher_exe_len;
-    else
-        p = NULL;
-
-    if (p || be_arg)
     {
-        size = wcslen(*cmd_line) + 1;
-        if (p)
-            size += game_exe_len - launcher_exe_len;
-        if (be_arg)
-            size += 1 /* space */ + arg_len;
-        size *= sizeof(WCHAR);
+        new_cmd_line = HeapAlloc( GetProcessHeap(), 0, ( wcslen(*cmd_line) + wcslen(belauncherW) + 1 - wcslen(app_name) ) * sizeof(WCHAR) );

-        /* freed by parent function */
-        new_cmd_line = HeapAlloc( GetProcessHeap(), HEAP_ZERO_MEMORY, size );
+        wcscpy(new_cmd_line, *cmd_line);
+        p = new_cmd_line;
+        if (p[0] == '\"')
+            p++;

-        if (p)
-        {
-            lstrcpynW(new_cmd_line, *cmd_line, p - *cmd_line);
-            MultiByteToWideChar(CP_ACP, 0, game_exe, -1, new_cmd_line + wcslen(new_cmd_line), game_exe_len + 1);
-            wcscat(new_cmd_line, p + launcher_exe_len);
-        }
-        else
-        {
-            wcscpy(new_cmd_line, *cmd_line);
-        }
+        memmove( p + wcslen(belauncherW), p + wcslen(app_name), (wcslen(p) - wcslen(belauncherW)) * sizeof(WCHAR) );
+        memcpy( p, belauncherW, wcslen(belauncherW) * sizeof(WCHAR) );

-        if (be_arg)
-        {
-            wcscat(new_cmd_line, L" ");
-            MultiByteToWideChar(CP_ACP, 0, be_arg, -1, new_cmd_line + wcslen(new_cmd_line), arg_len + 1);
-        }
+        TRACE("old command line %s.\n", debugstr_w(*cmd_line));
+        TRACE("new command line %s.\n", debugstr_w(new_cmd_line));

         *cmd_line = new_cmd_line;
     }

-    HeapFree( GetProcessHeap(), 0, configs );
     return 1;
 }

diff --git a/programs/belauncher/Makefile.in b/programs/belauncher/Makefile.in
new file mode 100644
index 00000000000..f2dc59b07ce
--- /dev/null
+++ b/programs/belauncher/Makefile.in
@@ -0,0 +1,7 @@
+MODULE    = belauncher.exe
+IMPORTS   =
+
+EXTRADLLFLAGS = -mwindows -municode
+
+SOURCES = \
+        main.c \
diff --git a/programs/belauncher/main.c b/programs/belauncher/main.c
new file mode 100644
index 00000000000..0f727f3ca7d
--- /dev/null
+++ b/programs/belauncher/main.c
@@ -0,0 +1,119 @@
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <io.h>
+
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(belauncher);
+
+int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cmdshow)
+{
+    char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe, *be_arg = NULL;
+    LARGE_INTEGER launcher_cfg_size;
+    unsigned char battleye_status;
+    int game_exe_len, arg_len;
+    PROCESS_INFORMATION pi;
+    HANDLE launcher_cfg;
+    LPWSTR launch_cmd;
+    STARTUPINFOW si = {0};
+    DWORD size;
+    BOOL wow64;
+
+    battleye_status = 0x3; /* Starting */
+    _write(1, &battleye_status, 1);
+
+    launcher_cfg = CreateFileW(L"Battleye\\BELauncher.ini", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+    if (launcher_cfg == INVALID_HANDLE_VALUE)
+        goto start_failed;
+
+    if(!GetFileSizeEx(launcher_cfg, &launcher_cfg_size) || launcher_cfg_size.u.HighPart)
+    {
+        CloseHandle(launcher_cfg);
+        goto start_failed;
+    }
+
+    configs = HeapAlloc( GetProcessHeap(), 0, launcher_cfg_size.u.LowPart + 1);
+
+    if (!ReadFile(launcher_cfg, configs, launcher_cfg_size.u.LowPart, &size, NULL) || size != launcher_cfg_size.u.LowPart)
+    {
+        CloseHandle(launcher_cfg);
+        HeapFree( GetProcessHeap(), 0, configs );
+        goto start_failed;
+    }
+
+    CloseHandle(launcher_cfg);
+
+    configs[launcher_cfg_size.u.LowPart] = '\0';
+    config = configs;
+    do
+    {
+        if (!strncmp(config, "32BitExe=", 9))
+            arch_32_exe = config + 9;
+
+        if (!strncmp(config, "64BitExe=", 9))
+            arch_64_exe = config + 9;
+
+        if (!strncmp(config, "BEArg=", 6))
+            be_arg = config + 6;
+    }
+    while ((config = strchr(config, '\n')) && *(config++));
+
+    if (arch_64_exe && (sizeof(void *) == 8 || (IsWow64Process(GetCurrentProcess(), &wow64) && wow64)))
+        game_exe = arch_64_exe;
+    else if (arch_32_exe)
+        game_exe = arch_32_exe;
+    else
+    {
+        HeapFree( GetProcessHeap(), 0, configs );
+        WINE_WARN("Failed to find game executable name from BattlEye config.\n");
+        goto start_failed;
+    }
+
+    if (strchr(game_exe, '\r'))
+        *(strchr(game_exe, '\r')) = 0;
+    if (strchr(game_exe, '\n'))
+        *(strchr(game_exe, '\n')) = 0;
+    game_exe_len = MultiByteToWideChar(CP_ACP, 0, game_exe, -1, NULL, 0) - 1;
+
+    if (!be_arg) arg_len = 0;
+    else
+    {
+        if (strchr(be_arg, '\r'))
+            *(strchr(be_arg, '\r')) = 0;
+        if (strchr(be_arg, '\n'))
+            *(strchr(be_arg, '\n')) = 0;
+        arg_len = MultiByteToWideChar(CP_ACP, 0, be_arg, -1, NULL, 0) - 1;
+    }
+
+    WINE_TRACE("Launching game executable %s for BattlEye.\n", game_exe);
+    battleye_status = 0x9; /* Launching Game */
+    _write(1, &battleye_status, 1);
+
+    launch_cmd = HeapAlloc(GetProcessHeap(), 0, (game_exe_len + 1 + wcslen(cmdline) + 1 + arg_len + 1) * sizeof(WCHAR));
+    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, launch_cmd, game_exe_len + 1);
+    launch_cmd[game_exe_len] = ' ';
+
+    wcscpy(launch_cmd + game_exe_len + 1, cmdline);
+    launch_cmd[game_exe_len + 1 + wcslen(cmdline)] = ' ';
+
+    MultiByteToWideChar(CP_ACP, 0, be_arg, -1, launch_cmd + game_exe_len + 1 + wcslen(cmdline) + 1, arg_len + 1);
+
+    if (!CreateProcessW(NULL, launch_cmd, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi))
+    {
+        battleye_status = 0xA; /* Launch Failed */
+        _write(1, &battleye_status, 1);
+
+        HeapFree( GetProcessHeap(), 0, launch_cmd );
+        return GetLastError();
+    }
+    HeapFree( GetProcessHeap(), 0, launch_cmd );
+
+    WaitForSingleObject(pi.hProcess, INFINITE);
+    CloseHandle(pi.hProcess);
+    return 0;
+
+start_failed:
+    battleye_status = 0x4; /* Start Failed */
+    _write(1, &battleye_status, 1);
+    return 0;
+}
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 109fa6c7fec..d9754f10ed0 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -552,39 +552,35 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalA( HANDLE token, const char *
     return ret;
 }
 
-static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len, WCHAR **cmd_line)
+/* Returns TRUE if the product name of the app matches the parameter */
+static BOOL product_name_matches(const WCHAR *app_name, const char *match)
 {
-    static const WCHAR belauncherW[] = L"c:\\windows\\system32\\belauncher.exe";
-
     WCHAR full_path[MAX_PATH];
-    WCHAR *p;
-    UINT size;
-    void *block;
     DWORD *translation;
-    char buf[100];
     char *product_name;
-    WCHAR *new_cmd_line;
+    char buf[100];
+    void *block;
+    UINT size;
 
     if (!GetLongPathNameW( app_name, full_path, MAX_PATH )) lstrcpynW( full_path, app_name, MAX_PATH );
     if (!GetFullPathNameW( full_path, MAX_PATH, full_path, NULL )) lstrcpynW( full_path, app_name, MAX_PATH );
 
-    /* We detect the BattlEye launcher executable through the product name property, as the executable name varies */
     size = GetFileVersionInfoSizeExW(0, full_path, NULL);
     if (!size)
-        return 0;
+        return FALSE;
 
     block = HeapAlloc( GetProcessHeap(), 0, size );
 
     if (!GetFileVersionInfoExW(0, full_path, 0, size, block))
     {
         HeapFree( GetProcessHeap(), 0, block );
-        return 0;
+        return FALSE;
     }
 
     if (!VerQueryValueA(block, "\\VarFileInfo\\Translation", (void **) &translation, &size) || size != 4)
     {
         HeapFree( GetProcessHeap(), 0, block );
-        return 0;
+        return FALSE;
     }
 
     sprintf(buf, "\\StringFileInfo\\%08lx\\ProductName", MAKELONG(HIWORD(*translation), LOWORD(*translation)));
@@ -592,16 +588,28 @@ static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_nam
     if (!VerQueryValueA(block, buf, (void **) &product_name, &size))
     {
         HeapFree( GetProcessHeap(), 0, block );
-        return 0;
+        return FALSE;
     }
 
-    if (strcmp(product_name, "BattlEye Launcher"))
+    if (strcmp(product_name, match))
     {
         HeapFree( GetProcessHeap(), 0, block);
-        return 0;
+        return FALSE;
     }
 
     HeapFree( GetProcessHeap(), 0, block );
+    return TRUE;
+}
+
+static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len, WCHAR **cmd_line)
+{
+    static const WCHAR belauncherW[] = L"c:\\windows\\system32\\belauncher.exe";
+    WCHAR *new_cmd_line;
+    WCHAR *p;
+
+    /* We detect the BattlEye launcher executable through the product name property, as the executable name varies */
+    if (!product_name_matches(app_name, "BattlEye Launcher"))
+        return 0;
 
     TRACE("Detected launch of a BattlEye Launcher, redirecting to Proton version.\n");
 
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index f2f6bb8d5db..98af91c47a7 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -555,49 +555,23 @@ static BOOL product_name_matches(const WCHAR *app_name, const char *match)
     return TRUE;
 }
 
-static int battleye_launcher_redirect_hack(const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len, WCHAR **cmd_line)
+static int battleye_launcher_redirect_hack( const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len )
 {
     static const WCHAR belauncherW[] = L"c:\\windows\\system32\\belauncher.exe";
-    WCHAR *new_cmd_line;
-    WCHAR *p;
 
     /* We detect the BattlEye launcher executable through the product name property, as the executable name varies */
-    if (!product_name_matches(app_name, "BattlEye Launcher"))
+    if (!product_name_matches( app_name, "BattlEye Launcher" ))
         return 0;
 
-    TRACE("Detected launch of a BattlEye Launcher, redirecting to Proton version.\n");
+    TRACE( "Detected launch of a BattlEye Launcher, redirecting to Proton version.\n" );
 
-    if (new_name_len < wcslen(belauncherW) + 1)
+    if (new_name_len < wcslen( belauncherW ) + 1)
     {
-        WARN("Game executable path doesn't fit in buffer.\n");
+        ERR( "Game executable path doesn't fit in buffer.\n" );
         return 0;
     }
 
-    wcscpy(new_name, belauncherW);
-
-    /* find and replace executable name in command line, and add BE argument */
-    p = *cmd_line;
-    if (p[0] == '\"')
-        p++;
-
-    if (!wcsncmp(p, app_name, wcslen(app_name)))
-    {
-        new_cmd_line = HeapAlloc( GetProcessHeap(), 0, ( wcslen(*cmd_line) + wcslen(belauncherW) + 1 - wcslen(app_name) ) * sizeof(WCHAR) );
-
-        wcscpy(new_cmd_line, *cmd_line);
-        p = new_cmd_line;
-        if (p[0] == '\"')
-            p++;
-
-        memmove( p + wcslen(belauncherW), p + wcslen(app_name), (wcslen(p) - wcslen(belauncherW)) * sizeof(WCHAR) );
-        memcpy( p, belauncherW, wcslen(belauncherW) * sizeof(WCHAR) );
-
-        TRACE("old command line %s.\n", debugstr_w(*cmd_line));
-        TRACE("new command line %s.\n", debugstr_w(new_cmd_line));
-
-        *cmd_line = new_cmd_line;
-    }
-
+    wcscpy( new_name, belauncherW );
     return 1;
 }
 
@@ -706,13 +680,8 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
         app_name = name;
     }
 
-    p = tidy_cmdline;
-    if (battleye_launcher_redirect_hack( app_name, name, ARRAY_SIZE(name), &tidy_cmdline ))
-    {
+    if (battleye_launcher_redirect_hack( app_name, name, ARRAY_SIZE(name) ))
         app_name = name;
-        if (p != tidy_cmdline && p != cmd_line)
-            HeapFree( GetProcessHeap(), 0, p );
-    }
 
     /* Warn if unsupported features are used */
 
diff --git a/dlls/kernelbase/process.c b/dlls/kernelbase/process.c
index 98af91c47a7..375a0f416a5 100644
--- a/dlls/kernelbase/process.c
+++ b/dlls/kernelbase/process.c
@@ -555,9 +555,11 @@ static BOOL product_name_matches(const WCHAR *app_name, const char *match)
     return TRUE;
 }
 
-static int battleye_launcher_redirect_hack( const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len )
+static int battleye_launcher_redirect_hack( const WCHAR *app_name, WCHAR *new_name, DWORD new_name_len,
+                                            WCHAR **orig_app_name )
 {
     static const WCHAR belauncherW[] = L"c:\\windows\\system32\\belauncher.exe";
+    unsigned int len;
 
     /* We detect the BattlEye launcher executable through the product name property, as the executable name varies */
     if (!product_name_matches( app_name, "BattlEye Launcher" ))
@@ -571,6 +573,13 @@ static int battleye_launcher_redirect_hack( const WCHAR *app_name, WCHAR *new_na
         return 0;
     }
 
+    len = (wcslen( app_name ) + 1) * sizeof(*app_name);
+    if (!(*orig_app_name = HeapAlloc( GetProcessHeap(), 0, len )))
+    {
+        ERR( "Out of memory.\n" );
+        return 0;
+    }
+    memcpy( *orig_app_name, app_name, len );
     wcscpy( new_name, belauncherW );
     return 1;
 }
@@ -621,7 +630,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
 {
     const struct proc_thread_attr *handle_list = NULL, *job_list = NULL;
     WCHAR name[MAX_PATH];
-    WCHAR *p, *tidy_cmdline = cmd_line;
+    WCHAR *p, *tidy_cmdline = cmd_line, *orig_app_name = NULL;
     RTL_USER_PROCESS_PARAMETERS *params = NULL;
     RTL_USER_PROCESS_INFORMATION rtl_info = { 0 };
     HANDLE parent = 0, debug = 0;
@@ -680,7 +689,7 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
         app_name = name;
     }
 
-    if (battleye_launcher_redirect_hack( app_name, name, ARRAY_SIZE(name) ))
+    if (battleye_launcher_redirect_hack( app_name, name, ARRAY_SIZE(name), &orig_app_name ))
         app_name = name;
 
     /* Warn if unsupported features are used */
@@ -704,9 +713,12 @@ BOOL WINAPI DECLSPEC_HOTPATCH CreateProcessInternalW( HANDLE token, const WCHAR
 
     if (!(params = create_process_params( app_name, tidy_cmdline, cur_dir, env, flags, startup_info )))
     {
+        HeapFree( GetProcessHeap(), 0, orig_app_name );
         status = STATUS_NO_MEMORY;
         goto done;
     }
+
+    HeapFree( GetProcessHeap(), 0, orig_app_name );
 
     if (flags & (DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS))
     {
diff --git a/programs/belauncher/Makefile.in b/programs/belauncher/Makefile.in
index 9800c0b45ba..882d914bc03 100644
--- a/programs/belauncher/Makefile.in
+++ b/programs/belauncher/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = belauncher.exe
-IMPORTS   =
+IMPORTS   = shlwapi
 
 EXTRADLLFLAGS = -mwindows -municode
 
diff --git a/programs/belauncher/main.c b/programs/belauncher/main.c
index 004a7d1a711..a40e7cf8853 100644
--- a/programs/belauncher/main.c
+++ b/programs/belauncher/main.c
@@ -1,6 +1,7 @@
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #include <io.h>
+#include <shlwapi.h>
 
 #include "wine/debug.h"
 
@@ -9,9 +10,10 @@ WINE_DEFAULT_DEBUG_CHANNEL(belauncher);
 int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cmdshow)
 {
     char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe, *be_arg = NULL;
+    WCHAR path[MAX_PATH], *p, config_path[MAX_PATH];
     LARGE_INTEGER launcher_cfg_size;
     unsigned char battleye_status;
-    int game_exe_len, arg_len;
+    int game_exe_len, arg_len, path_len;
     PROCESS_INFORMATION pi;
     HANDLE launcher_cfg;
     LPWSTR launch_cmd;
@@ -22,9 +24,31 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     battleye_status = 0x3; /* Starting */
     _write(1, &battleye_status, 1);
 
-    launcher_cfg = CreateFileW(L"Battleye\\BELauncher.ini", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+    *path = 0;
+    if ((size = GetEnvironmentVariableW(L"PROTON_ORIG_LAUNCHER_NAME", path, ARRAY_SIZE(path))) && size <= ARRAY_SIZE(path))
+    {
+        WINE_TRACE("PROTON_ORIG_LAUNCHER_NAME %s.\n", wine_dbgstr_w(path));
+
+        for (p = path + wcslen(path); p != path; --p)
+            if (*p == '\\') break;
+        if (*p == '\\')
+            ++p;
+        *p = 0;
+    }
+
+    wcscpy(config_path, path);
+    wcscat(config_path, L"Battleye\\BELauncher.ini");
+    launcher_cfg = CreateFileW(config_path, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+    if (launcher_cfg == INVALID_HANDLE_VALUE)
+    {
+        *path = 0;
+        launcher_cfg = CreateFileW(L"Battleye\\BELauncher.ini", GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+    }
     if (launcher_cfg == INVALID_HANDLE_VALUE)
+    {
+        WINE_ERR("BELauncher.ini not found.\n");
         goto start_failed;
+    }
 
     if(!GetFileSizeEx(launcher_cfg, &launcher_cfg_size) || launcher_cfg_size.u.HighPart)
     {
@@ -65,7 +89,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     else
     {
         HeapFree( GetProcessHeap(), 0, configs );
-        WINE_WARN("Failed to find game executable name from BattlEye config.\n");
+        WINE_ERR("Failed to find game executable name from BattlEye config.\n");
         goto start_failed;
     }
 
@@ -89,21 +113,33 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     battleye_status = 0x9; /* Launching Game */
     _write(1, &battleye_status, 1);
 
-    launch_cmd = HeapAlloc(GetProcessHeap(), 0, (game_exe_len + 1 + wcslen(cmdline) + 1 + arg_len + 1) * sizeof(WCHAR));
-    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, launch_cmd, game_exe_len + 1);
-    launch_cmd[game_exe_len] = ' ';
+    if (PathIsRelativeA(game_exe))
+        path_len = wcslen(path);
+    else
+        path_len = 0;
+
+    launch_cmd = HeapAlloc(GetProcessHeap(), 0, (path_len + game_exe_len + 1 + wcslen(cmdline) + 1 + arg_len + 1) * sizeof(WCHAR));
 
-    wcscpy(launch_cmd + game_exe_len + 1, cmdline);
-    launch_cmd[game_exe_len + 1 + wcslen(cmdline)] = ' ';
+    memcpy(launch_cmd, path, path_len * sizeof(*path));
 
-    MultiByteToWideChar(CP_ACP, 0, be_arg, -1, launch_cmd + game_exe_len + 1 + wcslen(cmdline) + 1, arg_len + 1);
+    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, launch_cmd + path_len, game_exe_len + 1);
+    launch_cmd[path_len + game_exe_len] = ' ';
+
+    wcscpy(launch_cmd + path_len + game_exe_len + 1, cmdline);
+    launch_cmd[path_len + game_exe_len + 1 + wcslen(cmdline)] = ' ';
+
+    if (!MultiByteToWideChar(CP_ACP, 0, be_arg, -1, launch_cmd + path_len + game_exe_len + 1 + wcslen(cmdline) + 1, arg_len + 1))
+        launch_cmd[path_len + game_exe_len + 1 + wcslen(cmdline)] = 0;
+
+    WINE_TRACE("game_exe %s, cmdline %s.\n", wine_dbgstr_a(game_exe), wine_dbgstr_w(cmdline));
+    WINE_TRACE("path %s, be_arg %s.\n", wine_dbgstr_w(path), wine_dbgstr_a(be_arg));
+    WINE_TRACE("launch_cmd %s.\n", wine_dbgstr_w(launch_cmd));
 
     if (!CreateProcessW(NULL, launch_cmd, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi))
     {
+        WINE_ERR("CreateProcessW failed.\n");
         battleye_status = 0xA; /* Launch Failed */
         _write(1, &battleye_status, 1);
-
-        HeapFree( GetProcessHeap(), 0, launch_cmd );
         return GetLastError();
     }
     HeapFree( GetProcessHeap(), 0, launch_cmd );
@@ -113,6 +144,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     return 0;
 
 start_failed:
+    WINE_ERR("Failed.\n");
     battleye_status = 0x4; /* Start Failed */
     _write(1, &battleye_status, 1);
     return 0;
diff --git a/programs/belauncher/Makefile.in b/programs/belauncher/Makefile.in
index 882d914bc03..927983f7423 100644
--- a/programs/belauncher/Makefile.in
+++ b/programs/belauncher/Makefile.in
@@ -1,5 +1,5 @@
 MODULE    = belauncher.exe
-IMPORTS   = shlwapi
+IMPORTS   = shlwapi shcore
 
 EXTRADLLFLAGS = -mwindows -municode
 
diff --git a/programs/belauncher/main.c b/programs/belauncher/main.c
index c8b8ccbf532..213378fd108 100644
--- a/programs/belauncher/main.c
+++ b/programs/belauncher/main.c
@@ -2,6 +2,7 @@
 #include <windows.h>
 #include <io.h>
 #include <shlwapi.h>
+#include <shellapi.h>
 
 #include "wine/debug.h"
 
@@ -9,8 +10,8 @@ WINE_DEFAULT_DEBUG_CHANNEL(belauncher);
 
 int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cmdshow)
 {
-    char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe, *be_arg = NULL;
-    WCHAR path[MAX_PATH], *p, config_path[MAX_PATH];
+    char *configs, *config, *arch_32_exe = NULL, *arch_64_exe = NULL, *game_exe = NULL, *be_arg = NULL;
+    WCHAR path[MAX_PATH], *p, config_path[MAX_PATH], game_exeW[MAX_PATH], **argvW;
     LARGE_INTEGER launcher_cfg_size;
     unsigned char battleye_status;
     int game_exe_len, arg_len, path_len;
@@ -18,6 +19,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     HANDLE launcher_cfg;
     LPWSTR launch_cmd;
     STARTUPINFOW si = {0};
+    int i, argc;
     DWORD size;
     BOOL wow64;
 
@@ -82,22 +84,47 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     }
     while ((config = strchr(config, '\n')) && *(config++));
 
-    if (arch_64_exe && (sizeof(void *) == 8 || (IsWow64Process(GetCurrentProcess(), &wow64) && wow64)))
-        game_exe = arch_64_exe;
-    else if (arch_32_exe)
-        game_exe = arch_32_exe;
-    else
+    *game_exeW = 0;
+    game_exe_len = 0;
+
+    if ((argvW = CommandLineToArgvW(cmdline, &argc)))
     {
-        HeapFree( GetProcessHeap(), 0, configs );
-        WINE_ERR("Failed to find game executable name from BattlEye config.\n");
-        goto start_failed;
+        for (i = 0; i < argc; ++i)
+        {
+            if (!wcscmp(argvW[i], L"-exe") && i < argc - 1)
+            {
+                wcscpy(game_exeW, argvW[i + 1]);
+                game_exe_len = wcslen(game_exeW);
+                break;
+            }
+        }
     }
 
-    if (strchr(game_exe, '\r'))
-        *(strchr(game_exe, '\r')) = 0;
-    if (strchr(game_exe, '\n'))
-        *(strchr(game_exe, '\n')) = 0;
-    game_exe_len = MultiByteToWideChar(CP_ACP, 0, game_exe, -1, NULL, 0) - 1;
+    if (!*game_exeW)
+    {
+        if (arch_64_exe && (sizeof(void *) == 8 || (IsWow64Process(GetCurrentProcess(), &wow64) && wow64)))
+            game_exe = arch_64_exe;
+        else if (arch_32_exe)
+            game_exe = arch_32_exe;
+        else
+        {
+            HeapFree( GetProcessHeap(), 0, configs );
+            WINE_ERR("Failed to find game executable name from BattlEye config.\n");
+            goto start_failed;
+        }
+
+        if (strchr(game_exe, '\r'))
+            *(strchr(game_exe, '\r')) = 0;
+        if (strchr(game_exe, '\n'))
+            *(strchr(game_exe, '\n')) = 0;
+        game_exe_len = MultiByteToWideChar(CP_ACP, 0, game_exe, -1, game_exeW, ARRAY_SIZE(game_exeW));
+        if (!game_exe_len)
+        {
+            WINE_ERR("Failed to convert game_exe %s.\n", wine_dbgstr_a(game_exe));
+            goto start_failed;
+        }
+        --game_exe_len;
+    }
 
     if (!be_arg) arg_len = 0;
     else
@@ -113,7 +140,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     battleye_status = 0x9; /* Launching Game */
     _write(1, &battleye_status, 1);
 
-    if (PathIsRelativeA(game_exe))
+    if (PathIsRelativeW(game_exeW))
         path_len = wcslen(path);
     else
         path_len = 0;
@@ -122,7 +149,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
 
     memcpy(launch_cmd, path, path_len * sizeof(*path));
 
-    MultiByteToWideChar(CP_ACP, 0, game_exe, -1, launch_cmd + path_len, game_exe_len + 1);
+    memcpy(launch_cmd + path_len, game_exeW, game_exe_len * sizeof(*launch_cmd));
     launch_cmd[path_len + game_exe_len] = ' ';
 
     wcscpy(launch_cmd + path_len + game_exe_len + 1, cmdline);
@@ -131,7 +158,7 @@ int WINAPI wWinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPWSTR cmdline, int cm
     if (!MultiByteToWideChar(CP_ACP, 0, be_arg, -1, launch_cmd + path_len + game_exe_len + 1 + wcslen(cmdline) + 1, arg_len + 1))
         launch_cmd[path_len + game_exe_len + 1 + wcslen(cmdline)] = 0;
 
-    WINE_TRACE("game_exe %s, cmdline %s.\n", wine_dbgstr_a(game_exe), wine_dbgstr_w(cmdline));
+    WINE_TRACE("game_exe %s, cmdline %s.\n", wine_dbgstr_w(game_exeW), wine_dbgstr_w(cmdline));
     WINE_TRACE("path %s, be_arg %s.\n", wine_dbgstr_w(path), wine_dbgstr_a(be_arg));
     WINE_TRACE("launch_cmd %s.\n", wine_dbgstr_w(launch_cmd));
 
